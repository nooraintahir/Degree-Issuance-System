create database project
use project

CREATE TABLE FYP
(
			FYP_NO NUMERIC(10),
			password varchar(10),
			PRIMARY KEY(FYP_NO)
);

INSERT INTO FYP VALUES
(12,'ab');
INSERT INTO FYP VALUES
(34,'cd');

CREATE TABLE Finance
(
			Id NUMERIC(10),
			Password VARCHAR(50),
			PRIMARY KEY(Id)
);

INSERT INTO FINANCE VALUES (82010,'abcde');

CREATE TABLE Onestop
(
			O_ID NUMERIC(10),	/*THIS IS THE ONE STOP ADMIN'S ID*/
			Password VARCHAR(50),
			PRIMARY KEY(O_ID)
);
INSERT INTO ONESTOP VALUES (2910,'hey');
INSERT INTO ONESTOP VALUES (3810,'hijk');

CREATE TABLE Director
(
			Dir_Id NUMERIC(10),
			Password VARCHAR(50),
			dname varchar(30),
			PRIMARY KEY(Dir_ID)
);
INSERT INTO DIRECTOR VALUES(971,'direct','Khawaja Musa');




CREATE TABLE STUDENT
(
			Roll_no NUMERIC(10),
			password VARCHAR(50),
			fIname varchar(10),
			laname varchar(10),
			email varchar(20),
			Feepaid bit DEFAULT 0,/* THIS IS EITHER 'TRUE' OR 'FALSE'*/
			PRIMARY KEY(Roll_no)
			
);

INSERT INTO STUDENT VALUES
(123, 'abc','Sara','Haseeb','123@nu.edu.pk',1);
INSERT INTO STUDENT VALUES
(456, 'def','Ali','Babar','456@nu.edu.pk',0);


CREATE TABLE Transcript
(
			stid numeric(10),
			Fname varchar(10),
			Lname varchar(10),
			Department VARCHAR(20),
			cgpa DECIMAL(5,4),
			foreign key(stid) REFERENCES STUDENT(Roll_no) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE GRADES
(
	stid numeric(10),
	Programming bit DEFAULT 0,
	COAL bit DEFAULT 0,
	OOP bit DEFAULT 0,
	Datastructures bit DEFAULT 0,
	Databasesystem bit DEFAULT 0,
	Algorithms bit DEFAULT 0,
	Calculus bit DEFAULT 0,
	Marketing bit DEFAULT 0,
	foreign key(stid) REFERENCES STUDENT(Roll_no) ON DELETE CASCADE ON UPDATE CASCADE
	
);
INSERT INTO GRADES VALUES (123,1,1,1,1,1,1,1,1);
INSERT INTO GRADES VALUES (456,1,1,0,1,1,1,1,0);


CREATE TABLE DEGREE_ISSUANCE(
	fname varchar(10),
	lname varchar(10),
	addr varchar(50),
	rollno numeric(10),
	cnic numeric,
	grad varchar(10),
	major varchar(10),
	cgpa DECIMAL(5,4),
	date date,
	timesubmitted time,
	issuefee bit default 1,
	
	FOREIGN KEY(rollno) REFERENCES STUDENT(Roll_no) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PERMISSION
(
	roll numeric(10),
	fyptime time,
	fintime time,
	accept time,
	Fypaccept BIT DEFAULT 0,
	Financeaccept BIT DEFAULT 0,
	processed BIT DEFAULT 0,
	status varchar(30),
	FOREIGN KEY(roll) REFERENCES STUDENT(Roll_no) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE DEGREE
(
	Fname varchar(10),
	Lname varchar(10),
	rollno numeric(10),
	major varchar(10),
	FOREIGN KEY(rollno) REFERENCES STUDENT(Roll_no) ON DELETE CASCADE ON UPDATE CASCADE

);


CREATE TABLE AUDIT_TRAIL
(
	tablename varchar(20),
	updated datetime,
	actiontaken varchar(20)

);

/************************************TRIGGERS************************************/

/*FYP*/
CREATE TRIGGER INSERT_FYP
ON FYP
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FYP', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_FYP
ON FYP
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FYP', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_FYP
ON FYP
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FYP', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*FINANCE*/

CREATE TRIGGER INSERT_FINANCE
ON FINANCE
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FINANCE', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_FINANCE
ON FINANCE
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FINANCE', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_FINANCE
ON FINANCE
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('FINANCE', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*ONESTOP*/

CREATE TRIGGER INSERT_ONESTOP
ON ONESTOP
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('ONESTOP', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_ONESTOP
ON ONESTOP
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('ONESTOP', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_ONESTOP
ON ONESTOP
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('ONESTOP', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*DIRECTOR*/

CREATE TRIGGER INSERT_DIRECTOR
ON DIRECTOR
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DIRECTOR', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_DIRECTOR
ON DIRECTOR
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DIRECTOR', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_DIRECTOR
ON DIRECTOR
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DIRECTOR', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*STUDENT*/

CREATE TRIGGER INSERT_STUDENT
ON STUDENT
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('STUDENT', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_STUDENT
ON STUDENT
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('STUDENT', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_STUDENT
ON STUDENT
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('STUDENT', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*TRANSCRIPT*/

CREATE TRIGGER INSERT_TRANSCRIPT
ON TRANSCRIPT
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('TRANSCRIPT', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_TRANSCRIPT
ON TRANSCRIPT
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('TRANSCRIPT', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_TRANSCRIPT
ON TRANSCRIPT
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('TRANSCRIPT', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*GRADES*/

CREATE TRIGGER INSERT_GRADES
ON GRADES
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('GRADES', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_GRADES
ON GRADES
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('GRADES', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_GRADES
ON GRADES
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('GRADES', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*DEGREE_ISSUANCE*/

CREATE TRIGGER INSERT_DEGREE_ISSUANCE
ON DEGREE_ISSUANCE
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE_ISSUANCE', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_DEGREE_ISSUANCE
ON DEGREE_ISSUANCE
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE_ISSUANCE', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_DEGREE_ISSUANCE
ON DEGREE_ISSUANCE
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE_ISSUANCE', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*PERMISSION*/

CREATE TRIGGER INSERT_PERMISSION
ON PERMISSION
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('PERMISSION', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_PERMISSION
ON PERMISSION
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('PERMISSION', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_PERMISSION
ON PERMISSION
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('PERMISSION', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END

/*DEGREE*/

CREATE TRIGGER INSERT_DEGREE
ON DEGREE
	AFTER INSERT 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE', GETDATE(),'INSERT')
	PRINT 'DATA HAS BEEN INSERTED' 
	PRINT GETDATE()
END

CREATE TRIGGER DEL_DEGREE
ON DEGREE
	AFTER DELETE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE', GETDATE(),'DELETE')
	PRINT 'DATA HAS BEEN DELETED' 
	PRINT GETDATE()
END

CREATE TRIGGER UPDATE_DEGREE
ON DEGREE
	AFTER UPDATE 
AS
BEGIN
	INSERT INTO AUDIT_TRAIL(tablename, updated, actiontaken) VALUES('DEGREE', GETDATE(),'UPDATE')
	PRINT 'DATA HAS BEEN UPDATED' 
	PRINT GETDATE()
END





